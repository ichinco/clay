

import com.the6hours.grails.springsecurity.facebook.FacebookAuthDao
import com.the6hours.grails.springsecurity.facebook.FacebookUserDomain
import com.the6hours.grails.springsecurity.facebook.FacebookAuthToken
import org.springframework.security.core.GrantedAuthority
import org.apache.log4j.Logger
import org.springframework.security.core.authority.GrantedAuthorityImpl
import FacebookUser
import com.clay.ClayUser
import com.clay.UserRole
import com.clay.Role
import org.joda.time.format.DateTimeFormatter
import org.joda.time.format.DateTimeFormat
import org.springframework.social.facebook.api.FacebookProfile
import org.springframework.social.facebook.api.impl.FacebookTemplate
import org.springframework.social.facebook.api.Facebook
import grails.util.GrailsConfig

/**
 * Autogenerated implementation of FacebookAuthDao
 *
 */
class FacebookAuthDaoImpl implements FacebookAuthDao<FacebookUser>  {

    private static def log = Logger.getLogger(this)

    /**
     * Tries to load app user for Facebook user
     *
     * @param uid UID of Facebook user
     * @return existing user, or null if there is no user for specified uid
     */
    FacebookUser findUser(long uid) {
        //must be fine for most cases
        return FacebookUser.findByUid(uid)
    }

    /**
     * Called when logged in facebook user doesn't exists in current database
     *
     * @param token information about current authnetication
     * @return just created user
     */
    FacebookUser create(FacebookAuthToken token) {
        FacebookUser user = new FacebookUser(
            accessToken: token.accessToken,
            uid: token.uid,
        )

        Facebook facebook = new FacebookTemplate(token.accessToken)
        FacebookProfile fbProfile = facebook.userOperations().userProfile
        String email = fbProfile.getEmail()
        String name = fbProfile.getName()
        String birthday = fbProfile.getBirthday()
        DateTimeFormatter fmt = DateTimeFormat.forPattern("MM/dd/yyyy");
        Date date = fmt.parseDateTime(birthday).toDate()

        ClayUser clayUser = new ClayUser()
        clayUser.username = name
        clayUser.password = UUID.randomUUID()
        clayUser.email = email
        clayUser.birthday = date
        clayUser.accountExpired = false
        clayUser.accountLocked = false
        clayUser.enabled = true

        user.user = clayUser

        UserRole ur = new UserRole()
        ur.user = clayUser
        ur.role = Role.findByAuthority(GrailsConfig.clay.role.user)

        FacebookUser.withTransaction {
            clayUser.save()
            user.save()
            ur.save()
        }
        return user
    }

    /**
     * Called when facebook auth token has been changed
     *
     * @param user updates used details
     */
    void update(FacebookUser user) {
        //TODO change regarding your domains structure
        FacebookUser.withTransaction {
            user.save()
        }
    }

    /**
     * Returns `principal` that will be stored into Security Context. It's good if it
     * implements {@link org.springframework.security.core.userdetails.UserDetails UserDetails} or
     * {@link java.security.Principal Principal}.
     *
     * At most cases it's just current user, passed as parameter
     *
     * @param user current user
     * @return user to put into Security Context
     */
    Object getPrincipal(FacebookUser user) {
        return user.user;
    }

    /**
     * Roles for current user
     *
     * @param user current user
     * @return roles for user
     */
    Collection<GrantedAuthority> getRoles(FacebookUser user) {
        //TODO change regarding your domains structure
        Collection<GrantedAuthority> roles = []
        FacebookUser.withTransaction {
            user.attach()
            roles = user.user.getAuthorities()
        }
        return roles
    }

}
